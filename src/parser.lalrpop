use crate::cst::{self, Binder, Def, Term, Id};

grammar;

pub Def: Def = {
    "def" <p:Id> ":" <ty:Term> ":=" <b:Term> ";" =>
        cst::def(p, Some(ty), Some(b)),
    "def" <p:Id> ":=" <b:Term> ";" =>
        cst::def(p, None, Some(b)),
    "axiom" <p:Id> ":" <ty:Term> ";" =>
        cst::def(p, Some(ty), None),
}

pub Program: Vec<Def> = {
    Def* => <>
}

pub Term: Term = {
    "λ" <binders:Binders> "." <b:Term> =>
        cst::lambda(binders, b),
    "Π" <binders:Binders> "." <b:Term> =>
        cst::pi(binders, b),
    <e:Op> =>
        e,
}

Binders: Vec<Binder> = {
    <id:Id> ":" <ty:Term> =>
        vec![cst::binder(vec![id], ty)],
    <proper_binders:Binder+> =>
        proper_binders,
}

Binder: Binder = {
    "(" <ids:Id+> ":" <ty:Term> ")" =>
        cst::binder(ids, ty),
    <id:Id> =>
        Binder { ids: vec![id], ty: None },
}

Op: Term = {
    <e:Call> =>
        e,
    <left:Call> "->" <right:Op> =>
        cst::arrow(left, right),
}

Call: Term = {
    <p:Prim> =>
        p,
    <f:Call> <a:Prim> =>
        cst::apply(f, a),
}

Prim: Term = {
    "(" <t:Term> ")" =>
        t,
    <v:Id> =>
        cst::var_or_blank(v),
}

Id: Id = <s:r"\w+"> => Id::from(s);
